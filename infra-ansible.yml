---
- name: Create infrastructure
  hosts: A1

  tasks:

  - name: Create IAM role
    iam_role:
      name: nginx-ec2-role
      state: present
      assume_role_policy_document: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
                },
              "Action": "sts:AssumeRole"
            }
          ]
        }
    register: iam_role_result

  - name: Debug IAM role creation result
    debug:
      var: iam_role_result

  - name: Attach policies to IAM role
    iam_policy_attach:
      iam_type: role
      iam_name: nginx-ec2-role
      policy_name: AmazonEC2FullAccess

  - name: Attach policies to IAM role
    iam_policy_attach:
      iam_type: role
      iam_name: nginx-ec2-role
      policy_name: AmazonVPCFullAccess

  - name: Attach policies to IAM role
    iam_policy_attach:
      iam_type: role
      iam_name: nginx-ec2-role
      policy_name: IAMReadOnlyAccess

  - name: create a new EC2 key pair
    amazon.aws.ec2_key:
      name: ansible_kpair
      region: us-east-1

  - name: Create a VPC
    amazon.aws.ec2_vpc_net:
      name: Ansible-VPC
      cidr_block: 10.0.0.0/16
      region: us-east-1
      tenancy: default
    register: vpc

  - name: Debug Instance State
    debug:
      var: vpc

  - name: Create Internet gateway
    amazon.aws.ec2_vpc_igw:
      vpc_id: "{{ vpc.vpc.id }}"
      state: present
      region: us-east-1
      tags:
        Name: ansible-igw
    register: igw

  - name: Debug Instance State
    debug:
      var: igw

  - name: Create subnet-1
    amazon.aws.ec2_vpc_subnet:
      state: present
      vpc_id: "{{ vpc.vpc.id }}"
      cidr: 10.0.10.0/24
      region: us-east-1
      az: us-east-1a
      tags:
        Name: Subnet-1
    register: subnet1

  - name: Debug Instance State
    debug:
      var: subnet1

  - name: Create subnet-2
    amazon.aws.ec2_vpc_subnet:
      state: present
      vpc_id: "{{ vpc.vpc.id }}"
      cidr: 10.0.11.0/24
      region: us-east-1
      az: us-east-1b
      tags:
        Name: Subnet-2
    register: subnet2

  - name: Debug Instance State
    debug:
      var: subnet2

  - name: Set up public subnet route table
    amazon.aws.ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      region: us-east-1
      tags:
        Name: P_RT
      subnets:
        - "{{ subnet1.subnet.id }}"
        - "{{ subnet2.subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id }}"
    register: public_route_table

  - name: Debug Instance State
    debug:
      var: public_route_table

  - name: Create Security Group
    amazon.aws.ec2_security_group:
      name: vpc-sg
      description: A Sg for allowing ssh and http
      vpc_id: "{{ vpc.vpc.id }}"
      region: us-east-1
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
    register: security_group

  - name: Debug Instance State
    debug:
      var: security_group

  - name: Create instance
    amazon.aws.ec2_instance:
      name: "NGINX-1"
      key_name: "ansible_kpair"
      subnet_id: "{{ subnet1.subnet.id }}"
      instance_type: t2.micro
      security_group: "{{ security_group.group_id }}"
      region: us-east-1
      user_data: "{{ lookup('file', '/home/ec2-user/nginx.sh') }}"
      iam_instance_profile:
        arn: "{{ iam_role_result.role.arn }}"
      network:
        assign_public_ip: true
      image_id: ami-0e8a34246278c21e4
      tags:
        Environment: Testing
    register: Instance_1 

  - name: Debug Instance State
    debug:
      var: Instance_1.instances[0].state.name
    when: Instance_1.instances is defined

  - name: Wait for Instance_1 instances to be in 'running' state
    wait_for:
      timeout: 80  # Increase the timeout as needed
      delay: 10
      state: "present"
    when: Instance_1.instances is defined

  - name: Create instance
    amazon.aws.ec2_instance:
      name: "NGINX-2"
      key_name: "ansible_kpair"
      subnet_id: "{{ subnet2.subnet.id }}"
      instance_type: t2.micro
      security_group: "{{ security_group.group_id }}"
      region: us-east-1
      user_data: "{{ lookup('file', '/home/ec2-user/nginx.sh') }}"
      iam_instance_profile:
        arn: "{{ iam_role_result.role.arn }}"
      network:
        assign_public_ip: true
      image_id: ami-0e8a34246278c21e4
      tags:
        Environment: Testing
    register: Instance_2

  - name: Debug Instance State
    debug:
      var: Instance_2.instances[0].state.name
    when: Instance_2.instances is defined

  - name: Wait for Instance_1 instances to be in 'running' state
    wait_for:
      timeout: 80  # Increase the timeout as needed
      delay: 10
      state: "present"
    when: Instance_2.instances is defined

  - name: Create target group
    elb_target_group:
      name: nginx-tg
      protocol: http
      port: 80
      vpc_id: "{{ vpc.vpc.id }}"
      health_check_path: /
      health_check_protocol: "HTTP"
      successful_response_codes: "200,250-260"
      region: us-east-1
      targets:
        - Id: "{{ Instance_1.instance_ids[0] }}"  # NGINX-1
          Port: 80
        - Id: "{{ Instance_2.instance_ids[0] }}"  # NGINX-2
          Port: 80
      state: present
    register: t_g

  - name: Debug Instance State
    debug:
      var: t_g

  - name: Creat ALB
    elb_application_lb:
      name: test-alb
      subnets:
        - "{{ subnet1.subnet.id }}"
        - "{{ subnet2.subnet.id }}"
      security_groups:
        - "{{ security_group.group_id }}"
      region: us-east-1
      listeners:
        - Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupName: nginx-tg
      state: present
    register: alb

  - name: Debug Instance State
    debug:
      var: alb

  - name: Create AMI for NGINX-1
    aws.ec2_ami:
      instance_id: "{{ Instance_1.instances[0].id }}"
      name: NGINX-1-AMI
      description: "AMI for NGINX-1"
      no_reboot: true
      wait: true
      region: us-east-1
    register: ami_result

  - name: Debug AMI creation result
    debug:
      var: ami_result

  - name: Create launch template using NGINX-1 AMI
    ec2_launch_template:
      name: nginx-launch-template
      version_description: "Initial version"
      version_number: 1
      key_name: "ansible_kpair"
      instance_type: t2.micro
      image_id: "{{ ami_result.image_id }}"
      security_group_ids:
        - "{{ security_group.group_id }}"
      block_device_mappings:
        - device_name: "/dev/xvda"
          ebs:
            volume_size: 8
      region: us-east-1
    register: launch_template

  - name: Debug launch template creation result
    debug:
      var: launch_template

  - name: Create Auto Scaling Group
    ec2_asg:
      name: nginx-asg
      launch_config_name: "{{ launch_template.name }}"
      min_size: 2
      max_size: 4
      vpc_zone_identifier:
        - "{{ subnet1.subnet.id }}"
        - "{{ subnet2.subnet.id }}"
      desired_capacity: 2
      health_check_type: EC2
      health_check_grace_period: 60
      target_group_arns:
        - "{{ alb.listeners[0].default_action.target_group_arn }}"
      tags:
        - key: "Name"
          value: "nginx-asg"
          propagate_at_launch: true
      region: us-east-1
    register: asg

  - name: Debug Auto Scaling Group creation result
    debug:
      var: asg